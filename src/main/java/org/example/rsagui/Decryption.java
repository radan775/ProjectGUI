import java.math.BigInteger;

public class Decryption {
    public static void main(String[] args){
        BigInteger e = new BigInteger("65537");
        BigInteger ciphertext = new BigInteger("57596265053268409575478441681711521289242418145409543364953944309539841520424808970183145831045837879185803731397017094993223680239484390150237145906950083308087952364819983986310052011670730224741166341694338034225034436049756914012753459090466771267018840713104697553783709711807757296559995215240111702483095981382729579039518523565239049227512765336976048389772311475297983926501479498751960980693363932674916902603451021638458001446558810324242458925359929855345294388781346490354075314848433826621001795434114089185194156894191832707754167781242644238613546997037368259921661938183231425977173067781946563975355213899068882045244159089336108537434547309807671762342941394268022583867676957772915896535218562518440435026251938035809483168060483933037914586716495493276852271223407937491027108424729705866750774178397772455249899898266904515832053774765944843356478285736424437702806805463938827546802882689559538751305651894443364036011710256384993640020244230573743322907901041998605093165591513182897860390556139219899063389923463688860071281651449845683746282551013883334766533689512777183692448569165188838619531737407083562965598219361377528176192227822425212651850942439059281087343447221446768586675133528999122600832474729481087886151918356625502695460725474455191308949328290978957093642197042215409236933309907828611966918014367520246272566155177404244927519012175780732691970248270255790940904297214792066229897396449195784759874746839948926480594746092885521816165986497487294658471565824789493639096907989855638580818931844337258964641197781678725401256065361763484040334079898355444197949573621761545246661939621624371352486200585078809814077361769542387809024175378212478126794552496111730363484358540473444882886063407566659877939372974234662133219325056093451021675870967921300635266351529267810731614626675284243343458770083241978990616225912094067830618928250841808316847072069930424563352597336290354523556281101267625342055365997082236538215798044858610499049225032012732881684110768655651885749794118049585336648155500315824760912481926070285446824264318988657952409564828094081763508788666418502522085103622741873171727061343018227542067448924006546145768599426698363430671913273683930502156883051640508485584918167813890264556412272683705424178360649961185741241789904530139736712362584437473640872834564784778513822960869031417120649842582435086858221875033589477836131535722648640464792510251705738947993463228275144972724680580092555243");
        BigInteger n = new BigInteger("2115450599144491917038385588615016049908348506402823589919032427963021703194162811683302153121544868256491746807644629208044584519956009538707138477944822096714289813672624523696425101656277837679254654261202648256206167477515721431714732640217928051111748994322968902855496993583717850918131623807164922970414001868901531828336828229790538258772007617206821857602431196781618708739904160006710581643545627368123119825567471944198471217154768496202810836846077690438397791993432546008779152547627806269098832035375122951893255717149135649233052968500335239387205114880875000365398061339700552281371422625787243468767998152836978341475646165496772527152289154004583023718750097459077032731922128083787211744514238158999634793645352210736531116318680132934010951276340064090464861427786346952033960121018010805807716630851857231058261167931084637945036265520880319140933713797314747592342464073197757552170116951770176645960581711396223069565425353217512695385715828770884408349159111264146391459531253507148689484585163541095427881885242201393605325931841563301688323857269154708579277744733500563979790778164355863717441497347268721456344034065887043907644626407694370398255688254756772532910120789279721623987256106887363722806233962365246906101516481928746692653624213795844762020574239727260820814909140594479013448271374214897458060568542175203420466966407352512140277565354872619224989103867542607405094577409156721636749976227057584921839385805810573570512922279654499791337582935956124378505700705391596486210537320921280155961953031774259529171637160039324762356284745214856091304190138121212074299620229062039226542766239349934474573977086640016939158156341583655721548117330760309545515390081597994365792553395437338299774034942392188723817012864366804590965454277100311388252579340882302359926929467959733551127726670273414298896624374414266343460402105220979340088754186155818186041963877084763238448671604538139577494266637783616607894977099500673430808671589220000379501649798471969706542078720938082364505240991799221994486472988345563364605217751547685594341741136596297915205886194193598655910552088990469356201547046217344344868879336834611081754406960832531425065378384523397142696214391216765102236692703688217048219866056689168502882709714014283313388879920973925226669123436509970114947670946643401508496788398454057513464188487626705009488140202674168510574593703557852144442098590125879496745307948790451873591185825083750428092341980356847652307");
        BigInteger p = new BigInteger("49337049370497586469544698142184155443199866745421908960880654507344122732194334545782851504036447422072390781374890535600677625518414591857741601772954444579970020368100157335281151776276990243505488436492931164030467661278636810220614201459888870949493962615068606575560970547133921282538336100946023928194838658240431047852565132961194866545076140159821017815400794902644878659452928147514428620510493176797679852211182671248041326441204813200452946750903613084421740879645582518161310819542390426657636375136443262106893188262231165102639533774939998359167561320307445011802150522805104930917062024354649989840616079986661839040161244881136932186732657377464737346767699050292744646522694675822844590272883541814609267256291086994941244330302334115159812247702808158204998958597486440486495463514862009448601403362240244116665371243456990067261717213174334528845111178461362465433388324788354576708275582498149526895803085314619644871899604229695829488908278613758377374586099279944238883433171647784163204156486223549358253800677936899891165125181514373576313111113447038502164463763508697293368907959888727674562248908045708341121667917478489402558485757767701013579615779071549845550136347349747613029201616674260729800899397143");

        decrypt(e, ciphertext, n, p);
    }

    private static void decrypt(BigInteger e, BigInteger ciphertext, BigInteger n, BigInteger p){
        BigInteger plaintext, phi, d, q; // inisialisasi variabel untuk phi, d, dan q
        String result;
        final BigInteger ONE = BigInteger.ONE;

        q = n.divide(p); // mencari kunci private q dengan n / p
        phi = p.subtract(ONE).multiply(q.subtract(ONE)); // menghitung kunci private phi dengan rumus phi = (p - 1) * (q - 1)
        d = e.modInverse(phi); // menghitung kunci private d dengan rumus d = e ^ -1 mod phi
        plaintext = ciphertext.modPow(d, n); // menghitung plaintext dengan plaintext = c ^ d mod n
        result = new String(plaintext.toByteArray()); // mengubah BigInteger menjadi byte, lalu menjadi string text kembali
        System.out.println(result);
    }
}